package korastudy.be.service.impl;

import korastudy.be.dto.request.Exam.SubmitAnswerRequest;
import korastudy.be.dto.request.Exam.SubmitExamRequest;
import korastudy.be.dto.response.Exam.*;
import korastudy.be.entity.MockTest.*;
import korastudy.be.entity.User.User;
import korastudy.be.repository.*;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Service
@RequiredArgsConstructor
public class ExamService {
    private final MockTestRepository mockTestRepo;
    private final MockTestPartRepository partRepo;
    private final MockTestQuestionRepository questionRepo;
    private final MockTestAnswersRepository answersRepo;
    private final ComprehensiveTestResultRepository resultRepo;
    private final UserRepository userRepo;
    private final PracticeTestResultRepository practiceResultRepo;
    private final ExamCommentRepository commentRepo;

    public List<ExamListItemResponse> getAllExams() {
        List<MockTest> tests = mockTestRepo.findAll();
        List<ExamListItemResponse> dtos = new ArrayList<>();
        for (MockTest t : tests) {
            ExamListItemResponse dto = new ExamListItemResponse();
            dto.setId(t.getId()); // MockTest c√≥ tr∆∞·ªùng id
            dto.setTitle(t.getTitle());
            dto.setDescription(t.getDescription());
            dto.setLevel(t.getLevel());
            dto.setTotalQuestions(t.getTotalQuestions());
            dto.setTotalPart(t.getTotalParts()); // C·∫ßn th√™m tr∆∞·ªùng n√†y v√†o MockTest entity
            dto.setDurationTimes(t.getDurationTimes()); // C·∫ßn th√™m tr∆∞·ªùng n√†y v√†o MockTest entity
            dtos.add(dto);
        }
        return dtos;
    }

    public ExamDetailResponse getExamDetail(Long id) {
        MockTest test = mockTestRepo.findById(id).orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y b√†i thi"));
        ExamDetailResponse dto = new ExamDetailResponse();
        dto.setId(test.getId());
        dto.setTitle(test.getTitle());
        dto.setDescription(test.getDescription());
        dto.setLevel(test.getLevel());
        dto.setTotalQuestions(test.getTotalQuestions());
        dto.setTotalPart(test.getTotalParts());
        dto.setDurationTimes(test.getDurationTimes());

        // Hardcode instructions v√† requirements
        dto.setInstructions(Arrays.asList(
                "ƒê·ªçc k·ªπ h∆∞·ªõng d·∫´n tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu",
                "L√†m b√†i theo th·ª© t·ª± t·ª´ ph·∫ßn nghe ƒë·∫øn ph·∫ßn ƒë·ªçc",
                "Kh√¥ng ƒë∆∞·ª£c quay l·∫°i ph·∫ßn ƒë√£ l√†m",
                "N·ªôp b√†i tr∆∞·ªõc khi h·∫øt th·ªùi gian"
        ));
        dto.setRequirements(Arrays.asList(
                "ƒê√£ h·ªçc xong b·∫£ng ch·ªØ c√°i Hangeul",
                "C√≥ t·ª´ v·ª±ng c∆° b·∫£n kho·∫£ng 800-1500 t·ª´"
        ));

        // L·∫•y c√°c ph·∫ßn c·ªßa b√†i thi
        List<MockTestPart> parts = partRepo.findByMockTestId(id);
        List<ExamPartResponse> partDTOs = new ArrayList<>();
        for (MockTestPart part : parts) {
            ExamPartResponse partDTO = new ExamPartResponse();
            partDTO.setPartId(part.getId()); // MockTestPart c√≥ tr∆∞·ªùng id
            partDTO.setPartNumber(part.getPartNumber());
            partDTO.setTitle(part.getTitle());
            partDTO.setDescription(part.getDescription());

            // L·∫•y c√¢u h·ªèi trong ph·∫ßn n√†y
            List<MockTestQuestion> questions = questionRepo.findByQuestionPart_Id(part.getId());
            List<ExamQuestionResponse> questionDTOs = new ArrayList<>();
            for (MockTestQuestion q : questions) {
                ExamQuestionResponse qdto = new ExamQuestionResponse();
                qdto.setQuestionId(q.getId()); // MockTestQuestion c√≥ tr∆∞·ªùng id
                qdto.setQuestionText(q.getQuestionText());
                qdto.setOption(q.getOption());
                qdto.setImageUrl(q.getImageUrl());
                qdto.setAudioUrl(q.getAudioUrl());
                questionDTOs.add(qdto);
            }
            partDTO.setQuestions(questionDTOs);
            partDTOs.add(partDTO);
        }
        dto.setParts(partDTOs);
        return dto;
    }

    public ExamResultResponse submitExam(Long examId, SubmitExamRequest request, Long userId) {
        System.out.println("=== EXAM SUBMISSION DEBUG ===");
        System.out.println("Exam ID: " + examId + " (type: " + examId.getClass().getSimpleName() + ")");
        System.out.println("User ID: " + userId + " (type: " + userId.getClass().getSimpleName() + ")");
        System.out.println("Request: " + request);
        System.out.println("Request answers: " + (request != null ? request.getAnswers() : "null"));
        
        // Validate input parameters
        if (examId == null) {
            throw new RuntimeException("Exam ID kh√¥ng ƒë∆∞·ª£c null");
        }
        if (userId == null) {
            throw new RuntimeException("User ID kh√¥ng ƒë∆∞·ª£c null");
        }
        if (request == null || request.getAnswers() == null) {
            throw new RuntimeException("Request ho·∫∑c answers kh√¥ng ƒë∆∞·ª£c null");
        }
        
        // T√¨m MockTest
        MockTest mockTest = null;
        try {
            mockTest = mockTestRepo.findById(examId)
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y b√†i thi v·ªõi ID: " + examId));
            System.out.println("‚úÖ Found exam: " + mockTest.getTitle());
        } catch (Exception e) {
            System.err.println("‚ùå Error finding exam: " + e.getMessage());
            throw e;
        }

        // T√¨m User v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p kh√°c nhau
        User user = null;
        try {
            System.out.println("üîç Searching for user with ID: " + userId);
            
            // Ph∆∞∆°ng ph√°p 1: T√¨m tr·ª±c ti·∫øp theo user.id
            Optional<User> userOptional = userRepo.findById(userId);
            System.out.println("findById result: " + userOptional.isPresent());
            
            if (userOptional.isPresent()) {
                user = userOptional.get();
                System.out.println("‚úÖ Found user by findById: " + user.getEmail() + " (ID: " + user.getId() + ")");
            } else {
                System.out.println("‚ùå User not found by user.id, trying account_id...");
                
                // Ph∆∞∆°ng ph√°p 2: T√¨m theo account_id n·∫øu userId th·ª±c ch·∫•t l√† account_id
                try {
                    // Assuming you have a method to find user by account_id
                    // You might need to create this method in UserRepository
                    List<User> allUsers = userRepo.findAll();
                    for (User u : allUsers) {
                        System.out.println("Checking user: ID=" + u.getId() + ", Email=" + u.getEmail() + 
                                         ", AccountId=" + (u.getAccount() != null ? u.getAccount().getId() : "null"));
                        
                        // Try to match by account_id if user has account relation
                        if (u.getAccount() != null && u.getAccount().getId().equals(userId)) {
                            user = u;
                            System.out.println("‚úÖ Found user by account_id: " + user.getEmail() + " (User ID: " + user.getId() + ", Account ID: " + userId + ")");
                            break;
                        }
                        
                        // Also try direct ID match
                        if (u.getId().equals(userId)) {
                            user = u;
                            System.out.println("‚úÖ Found user by manual ID search: " + user.getEmail());
                            break;
                        }
                    }
                } catch (Exception e) {
                    System.err.println("Error in alternative user search: " + e.getMessage());
                }
            }
            
            if (user == null) {
                // Log t·∫•t c·∫£ user IDs ƒë·ªÉ debug
                List<User> allUsers = userRepo.findAll();
                StringBuilder userInfo = new StringBuilder("Available users: ");
                for (User u : allUsers) {
                    String accountId = (u.getAccount() != null) ? u.getAccount().getId().toString() : "null";
                    userInfo.append("User[id=").append(u.getId())
                           .append(", email=").append(u.getEmail())
                           .append(", accountId=").append(accountId)
                           .append("] ");
                }
                System.err.println(userInfo.toString());
                
                throw new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: " + userId + ". " +
                    "ƒê√£ th·ª≠ t√¨m theo user.id v√† account.id nh∆∞ng kh√¥ng th·∫•y.");
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå Exception while finding user: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("L·ªói khi t√¨m ng∆∞·ªùi d√πng: " + e.getMessage());
        }

        // Verify user object
        System.out.println("‚úÖ Final user object: " + user.getEmail() + " (User ID: " + user.getId() + 
                          ", Account ID: " + (user.getAccount() != null ? user.getAccount().getId() : "null") + ")");

        // L·∫•y danh s√°ch c√¢u h·ªèi v√† ƒë√°p √°n ƒë√∫ng
        List<MockTestPart> parts = partRepo.findByMockTestId(examId);
        Map<Long, String> correctAnswers = new HashMap<>();
        Map<Long, String> questionTexts = new HashMap<>();
        int totalQuestions = 0;

        System.out.println("üìù Processing " + parts.size() + " parts");

        for (MockTestPart part : parts) {
            List<MockTestQuestion> questions = questionRepo.findByQuestionPart_Id(part.getId());
            System.out.println("Part " + part.getPartNumber() + " has " + questions.size() + " questions");
            
            for (MockTestQuestion q : questions) {
                correctAnswers.put(q.getId(), q.getCorrectAnswer());
                questionTexts.put(q.getId(), q.getQuestionText());
                totalQuestions++;
                System.out.println("Question " + q.getId() + " correct answer: " + q.getCorrectAnswer());
            }
        }

        System.out.println("üìä Total questions: " + totalQuestions);
        System.out.println("üìä Student answers count: " + request.getAnswers().size());

        // Ch·∫•m ƒëi·ªÉm v√† t·∫°o chi ti·∫øt ƒë√°p √°n
        int correct = 0;
        int incorrect = 0;
        List<ExamAnswerDetailResponse> answerDetails = new ArrayList<>();
        
        for (SubmitAnswerRequest ans : request.getAnswers()) {
            System.out.println("Checking question " + ans.getQuestionId() + 
                             ", student answer: '" + ans.getSelectedAnswer() + "'");
            
            String correctAns = correctAnswers.get(ans.getQuestionId());
            String questionText = questionTexts.get(ans.getQuestionId());
            boolean isCorrect = correctAns != null && correctAns.trim().equals(ans.getSelectedAnswer().trim());
            
            if (isCorrect) {
                correct++;
                System.out.println("‚úÖ Correct");
            } else {
                incorrect++;
                System.out.println("‚ùå Incorrect (correct: '" + correctAns + "')");
            }
            
            // T·∫°o chi ti·∫øt ƒë√°p √°n
            ExamAnswerDetailResponse detail = new ExamAnswerDetailResponse();
            detail.setQuestionId(ans.getQuestionId());
            detail.setQuestionText(questionText != null ? questionText : "");
            detail.setSelectedAnswer(ans.getSelectedAnswer());
            detail.setCorrectAnswer(correctAns != null ? correctAns : "");
            detail.setIsCorrect(isCorrect);
            detail.setPoints(isCorrect ? 1 : 0);
            
            answerDetails.add(detail);
        }
        
        // Th√™m c√°c c√¢u ch∆∞a l√†m
        for (Map.Entry<Long, String> entry : correctAnswers.entrySet()) {
            Long questionId = entry.getKey();
            boolean answered = request.getAnswers().stream()
                .anyMatch(ans -> ans.getQuestionId().equals(questionId));
            
            if (!answered) {
                ExamAnswerDetailResponse detail = new ExamAnswerDetailResponse();
                detail.setQuestionId(questionId);
                detail.setQuestionText(questionTexts.get(questionId));
                detail.setSelectedAnswer("");
                detail.setCorrectAnswer(entry.getValue());
                detail.setIsCorrect(false);
                detail.setPoints(0);
                answerDetails.add(detail);
            }
        }
        
        // S·∫Øp x·∫øp theo questionId
        answerDetails.sort((a, b) -> Long.compare(a.getQuestionId(), b.getQuestionId()));
        
        // T√≠nh ƒëi·ªÉm theo ph·∫ßn trƒÉm
        double score = (totalQuestions > 0) ? (correct * 100.0 / totalQuestions) : 0;
        
        System.out.println("üìä Final score: " + correct + "/" + totalQuestions + " = " + score + "%");

        // L∆∞u k·∫øt qu·∫£
        ComprehensiveTestResult result = null;
        try {
            result = ComprehensiveTestResult.builder()
                    .testType("COMPREHENSIVE")
                    .testDate(LocalDateTime.now())
                    .noCorrect(correct)
                    .noIncorrect(incorrect)
                    .scores(score)
                    .mockTest(mockTest)
                    .user(user)
                    .build();
            
            System.out.println("üíæ Saving result...");
            result = resultRepo.save(result);
            System.out.println("‚úÖ Result saved with ID: " + result.getId());
            
        } catch (Exception e) {
            System.err.println("‚ùå Error saving result: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("L·ªói khi l∆∞u k·∫øt qu·∫£: " + e.getMessage());
        }

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªõi chi ti·∫øt ƒë√°p √°n
        ExamResultResponse dto = new ExamResultResponse();
        dto.setExamId(examId);
        dto.setResultId(result.getId());
        dto.setTotalQuestions(totalQuestions);
        dto.setNoCorrect(correct);
        dto.setNoIncorrect(incorrect);
        dto.setScores(score);
        dto.setTestDate(result.getTestDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")));
        dto.setAnswerDetails(answerDetails); // Th√™m chi ti·∫øt ƒë√°p √°n
        
        System.out.println("üéâ Returning result with " + answerDetails.size() + " answer details");
        return dto;
    }

    public ExamResultResponse submitPracticeTest(Long examId, List<Long> partIds, SubmitExamRequest request, Long userId) {
        MockTest mockTest = mockTestRepo.findById(examId)
            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y b√†i thi"));

        User user = userRepo.findById(userId)
            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        // Get questions from selected parts only
        Map<Long, String> correctAnswers = new HashMap<>();
        Map<Long, Integer> questionPoints = new HashMap<>();
        int totalQuestions = 0;
        int totalPoints = 0;

        for (Long partId : partIds) {
            List<MockTestQuestion> questions = questionRepo.findByQuestionPart_Id(partId);
            for (MockTestQuestion q : questions) {
                correctAnswers.put(q.getId(), q.getCorrectAnswer());
                questionPoints.put(q.getId(), q.getPoints());
                totalQuestions++;
                totalPoints += q.getPoints();
            }
        }

        // Grade the practice test
        int correct = 0;
        int incorrect = 0;
        int earnedPoints = 0;

        for (SubmitAnswerRequest ans : request.getAnswers()) {
            String correctAns = correctAnswers.get(ans.getQuestionId());
            int points = questionPoints.getOrDefault(ans.getQuestionId(), 1);
            
            if (correctAns != null && correctAns.equals(ans.getSelectedAnswer())) {
                correct++;
                earnedPoints += points;
            } else {
                incorrect++;
            }
        }

        double score = (totalPoints > 0) ? (earnedPoints * 100.0 / totalPoints) : 0;

        // Save practice test result
        PracticeTestResult result = PracticeTestResult.builder()
            .testType("PRACTICE")
            .noCorrect(correct)
            .noIncorrect(incorrect)
            .totalQuestions(totalQuestions)
            .scores(score)
            .earnedPoints(earnedPoints)
            .totalPoints(totalPoints)
            .completedParts(partIds)
            .mockTest(mockTest)
            .user(user)
            .build();
        result = practiceResultRepo.save(result);

        // Return result
        ExamResultResponse dto = new ExamResultResponse();
        dto.setExamId(examId);
        dto.setResultId(result.getId());
        dto.setTotalQuestions(totalQuestions);
        dto.setNoCorrect(correct);
        dto.setNoIncorrect(incorrect);
        dto.setScores(score);
        dto.setEarnedPoints(earnedPoints);
        dto.setTotalPoints(totalPoints);
        dto.setTestDate(result.getTestDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")));
        return dto;
    }

    public List<ExamResultResponse> getExamHistory(Long userId) {
        User user = userRepo.findById(userId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        List<ComprehensiveTestResult> results = resultRepo.findByUser(user);
        List<ExamResultResponse> dtos = new ArrayList<>();

        for (ComprehensiveTestResult r : results) {
            ExamResultResponse dto = new ExamResultResponse();
            dto.setExamId(r.getMockTest().getId()); // Qua quan h·ªá ManyToOne
            dto.setTotalQuestions(r.getNoCorrect() + r.getNoIncorrect());
            dto.setNoCorrect(r.getNoCorrect());
            dto.setNoIncorrect(r.getNoIncorrect());
            dto.setScores(r.getScores());
            dto.setTestDate(r.getTestDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")));
            dtos.add(dto);
        }
        return dtos;
    }

    public List<ExamListItemResponse> searchExams(String title, String level, String type, int page, int size) {
        List<MockTest> tests = mockTestRepo.findAll();
        List<MockTest> filteredTests = tests;

        // Filter theo title
        if (title != null && !title.trim().isEmpty()) {
            filteredTests = filteredTests.stream()
                    .filter(test -> test.getTitle().toLowerCase().contains(title.toLowerCase()))
                    .toList();
        }

        // Filter theo level
        if (level != null && !level.trim().isEmpty()) {
            filteredTests = filteredTests.stream()
                    .filter(test -> test.getLevel().equals(level))
                    .toList();
        }

//        // Filter theo type (n·∫øu c√≥ tr∆∞·ªùng type trong MockTest)
////        if (type != null && !type.trim().isEmpty()) {
////            filteredTests = filteredTests.stream()
////                    .filter(test -> test.getTestType() != null && test.getTestType().equals(type))
////                    .toList();
////        }

        // Pagination
        int start = page * size;
        int end = Math.min(start + size, filteredTests.size());

        if (start >= filteredTests.size()) {
            return new ArrayList<>();
        }

        List<MockTest> paginatedTests = filteredTests.subList(start, end);

        // Convert sang DTO
        List<ExamListItemResponse> dtos = new ArrayList<>();
        for (MockTest t : paginatedTests) {
            ExamListItemResponse dto = new ExamListItemResponse();
            dto.setId(t.getId());
            dto.setTitle(t.getTitle());
            dto.setDescription(t.getDescription());
            dto.setLevel(t.getLevel());
            dto.setTotalQuestions(t.getTotalQuestions());
            dto.setTotalPart(t.getTotalParts());
            dto.setDurationTimes(t.getDurationTimes());
            dtos.add(dto);
        }
        return dtos;
    }

    public ExamResultResponse getExamResultDetail(Long resultId) {
        ComprehensiveTestResult result = resultRepo.findById(resultId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ thi"));

        ExamResultResponse dto = new ExamResultResponse();
        dto.setExamId(result.getMockTest().getId());
        dto.setTotalQuestions(result.getNoCorrect() + result.getNoIncorrect());
        dto.setNoCorrect(result.getNoCorrect());
        dto.setNoIncorrect(result.getNoIncorrect());
        dto.setScores(result.getScores());
        dto.setTestDate(result.getTestDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")));
        return dto;
    }

    public List<ExamListItemResponse> getExamsByLevel(String level) {
        List<MockTest> tests = mockTestRepo.findByLevel(level);
        List<ExamListItemResponse> dtos = new ArrayList<>();

        for (MockTest t : tests) {
            ExamListItemResponse dto = new ExamListItemResponse();
            dto.setId(t.getId());
            dto.setTitle(t.getTitle());
            dto.setDescription(t.getDescription());
            dto.setLevel(t.getLevel());
            dto.setTotalQuestions(t.getTotalQuestions());
            dto.setTotalPart(t.getTotalParts());
            dto.setDurationTimes(t.getDurationTimes());
            dtos.add(dto);
        }
        return dtos;
    }

    public Map<String, Object> getExamStatistics(Long userId) {
        User user = userRepo.findById(userId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        List<ComprehensiveTestResult> results = resultRepo.findByUser(user);
        Map<String, Object> statistics = new HashMap<>();

        if (results.isEmpty()) {
            statistics.put("totalExams", 0);
            statistics.put("averageScore", 0.0);
            statistics.put("bestScore", 0.0);
            statistics.put("totalCorrect", 0);
            statistics.put("totalIncorrect", 0);
            statistics.put("accuracyRate", 0.0);
            return statistics;
        }

        // T√≠nh th·ªëng k√™
        int totalExams = results.size();
        double totalScore = results.stream().mapToDouble(ComprehensiveTestResult::getScores).sum();
        double averageScore = totalScore / totalExams;
        double bestScore = results.stream().mapToDouble(ComprehensiveTestResult::getScores).max().orElse(0.0);
        int totalCorrect = results.stream().mapToInt(ComprehensiveTestResult::getNoCorrect).sum();
        int totalIncorrect = results.stream().mapToInt(ComprehensiveTestResult::getNoIncorrect).sum();
        double accuracyRate = (totalCorrect + totalIncorrect) > 0 ?
                (totalCorrect * 100.0 / (totalCorrect + totalIncorrect)) : 0.0;

        statistics.put("totalExams", totalExams);
        statistics.put("averageScore", Math.round(averageScore * 100.0) / 100.0);
        statistics.put("bestScore", Math.round(bestScore * 100.0) / 100.0);
        statistics.put("totalCorrect", totalCorrect);
        statistics.put("totalIncorrect", totalIncorrect);
        statistics.put("accuracyRate", Math.round(accuracyRate * 100.0) / 100.0);

        return statistics;
    }

    public List<ExamCommentResponse> getExamComments(Long examId) {
        List<ExamComment> comments = commentRepo.findByMockTest_IdOrderByCreatedAtDesc(examId);
        List<ExamCommentResponse> dtos = new ArrayList<>();

        for (ExamComment comment : comments) {
            ExamCommentResponse dto = new ExamCommentResponse();
            dto.setId(comment.getId());
            dto.setContext(comment.getContext());
            dto.setCreatedAt(comment.getCreatedAt());
            dto.setUpdatedAt(comment.getUpdatedAt());
            // S·ª≠ d·ª•ng firstName + lastName thay v√¨ username
            String displayName = (comment.getUser().getFirstName() != null ? comment.getUser().getFirstName() : "") +
                           (comment.getUser().getLastName() != null ? " " + comment.getUser().getLastName() : "");
            dto.setUsername(displayName.trim().isEmpty() ? comment.getUser().getEmail() : displayName.trim());
            dtos.add(dto);
        }
        return dtos;
    }

    public ExamCommentResponse addExamComment(Long examId, String context, Long userId) {
        MockTest mockTest = mockTestRepo.findById(examId)
            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y b√†i thi"));

        User user = userRepo.findById(userId)
            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        ExamComment comment = ExamComment.builder()
            .context(context)
            .mockTest(mockTest)
            .user(user)
            .build();
        comment = commentRepo.save(comment);

        ExamCommentResponse dto = new ExamCommentResponse();
        dto.setId(comment.getId());
        dto.setContext(comment.getContext());
        dto.setCreatedAt(comment.getCreatedAt());
        dto.setUpdatedAt(comment.getUpdatedAt());
        // S·ª≠ d·ª•ng firstName + lastName thay v√¨ username
        String displayName = (user.getFirstName() != null ? user.getFirstName() : "") +
                       (user.getLastName() != null ? " " + user.getLastName() : "");
        dto.setUsername(displayName.trim().isEmpty() ? user.getEmail() : displayName.trim());
        return dto;
    }
}